import { OperationCode } from "./typesPseudoCode";

export const getColaPrioridadCode = (): OperationCode => ({
  enqueue: [
    "/**",
    " * Método que inserta un elemento en la posición correspondiente según su prioridad.",
    " * @param valor Elemento a encolar.",
    " * @param prioridad Prioridad del nodo (menor número = mayor prioridad).",
    " * @return Elemento insertado.",
    " */",
    "public NodoPrioridad<T> encolar(T valor, int prioridad) {",
    "  if (this.tamanio >= this.MAX_TAMANIO)",
    '    throw new RuntimeException("No fue posible encolar el nodo: Cantidad de nodos máxima alcanzada (tamaño máximo: " + this.MAX_TAMANIO + ").");',
    "",
    "  NodoPrioridad<T> nuevoNodo = new NodoPrioridad<>(valor, prioridad);",
    "",
    "  if (this.esVacia() || prioridad < this.inicio.getPrioridad()) {",
    "    nuevoNodo.setSiguiente(this.inicio);",
    "    this.inicio = nuevoNodo;",
    "  } else {",
    "    NodoPrioridad<T> actual = this.inicio;",
    "    while (actual.getSiguiente() != null && actual.getSiguiente().getPrioridad() <= prioridad) {",
    "      actual = actual.getSiguiente();",
    "    }",
    "    nuevoNodo.setSiguiente(actual.getSiguiente());",
    "    actual.setSiguiente(nuevoNodo);",
    "  }",
    "",
    "  this.tamanio++;",
    "  return nuevoNodo;",
    "}",
  ],

  dequeue: [
    "/**",
    " * Método que elimina el elemento con mayor prioridad (inicio).",
    " * @return Elemento decolado.",
    " */",
    "public NodoPrioridad<T> decolar() {",
    "  if (this.esVacia())",
    '    throw new RuntimeException("No fue posible decolar el nodo: la cola está vacía (tamaño actual: 0).");',
    "",
    "  NodoPrioridad<T> nodoAEliminar = this.inicio;",
    "",
    "  if (this.inicio.getSiguiente() != null) {",
    "    this.inicio = this.inicio.getSiguiente();",
    "  } else {",
    "    this.inicio = null;",
    "  }",
    "",
    "  this.tamanio--;",
    "  return nodoAEliminar;",
    "}",
  ],

  clean: [
    "/**",
    " * Método que vacía la cola.",
    " * post: La cola quedó vacía.",
    " */",
    "public void vaciar() {",
    "  this.inicio = null;",
    "  this.tamanio = 0;",
    "}",
  ],

  getFront: [
    "/**",
    " * Método que obtiene el elemento inicial de la cola.",
    " * @return NodoPrioridad o null si la cola está vacía.",
    " */",
    "public NodoPrioridad<T> getInicio() {",
    "  return this.inicio;",
    "}",
  ],
});
