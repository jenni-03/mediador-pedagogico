import { OperationCode } from "./typesPseudoCode";

export const getColaCode = (): OperationCode => ({
  enqueue: [
    "/**",
    " * Método que encola un nuevo elemento en la cola.",
    " * @param valor Elemento a encolar.",
    " */",
    "public NodoS<T> encolar(T valor) {",
    "  if (this.tamanio >= this.MAX_TAMANIO)",
    '    throw new RuntimeException("No fue posible encolar el nodo: Cantidad de nodos máxima alcanzada (tamaño máximo: " + this.MAX_TAMANIO + ").");',
    "",
    "  NodoS<T> nuevoNodo = new NodoS<>(valor);",
    "",
    "  if (this.esVacia()) {",
    "    this.inicio = nuevoNodo;",
    "    this.fin = nuevoNodo;",
    "  } else {",
    "    this.fin.setSiguiente(nuevoNodo);",
    "    this.fin = nuevoNodo;",
    "  }",
    "",
    "  this.tamanio++;",
    "  return nuevoNodo;",
    "}",
  ],

  dequeue: [
    "/**",
    " * Método que decola (remueve) el primer elemento de la cola.",
    " * @return Elemento decolado.",
    " */",
    "public NodoS<T> decolar() {",
    "  if (this.esVacia())",
    '    throw new RuntimeException("No fue posible decolar el nodo: La cola está vacía (tamaño actual: 0).");',
    "",
    "  NodoS<T> nodoAEliminar = this.inicio;",
    "",
    "  if (this.inicio == this.fin) {",
    "    this.inicio = null;",
    "    this.fin = null;",
    "  } else {",
    "    this.inicio = this.inicio.getSiguiente();",
    "  }",
    "",
    "  this.tamanio--;",
    "  return nodoAEliminar;",
    "}",
  ],

  clean: [
    "/**",
    " * Método que vacía la cola.",
    " * post: La cola quedó vacía.",
    " */",
    "public void vaciar() {",
    "  this.inicio = null;",
    "  this.fin = null;",
    "  this.tamanio = 0;",
    "}",
  ],

  getFront: [
    "/**",
    " * Método que obtiene el elemento inicial de la cola.",
    " * @return NodoS o null si la cola está vacía.",
    " */",
    "public NodoS<T> getInicio() {",
    "  return this.inicio;",
    "}",
  ],
});
