import { TourStep } from "../typesTour";

export function getArbolNarioTour(): TourStep[] {
  return [
    // ================= INTRO =================
    {
      type: "info",
      description:
        "üåø Un **√Årbol N-ario** permite 0..N hijos por nodo. √ötil para jerarqu√≠as (men√∫s, carpetas, organigramas).",
    },
    {
      type: "info",
      description:
        "‚öôÔ∏è Reglas del simulador: (1) **createRoot(valor)** crea la ra√≠z **y** el objeto **arbolNario**. (2) Desde ah√≠, todos los comandos se invocan como **arbolNario.*** (3) Tras **clean()**, el √°rbol queda vac√≠o y **se elimina el objeto**; para continuar debes volver a llamar **createRoot(valor)** (sin prefijo).",
    },
    {
      type: "info",
      description:
        "üÜî Importante: el **id es num√©rico y consecutivo**. La ra√≠z queda con id **1**; luego cada nueva inserci√≥n incrementa el id (**2, 3, 4, ...**). Usa esos ids en `insertChild`, `updateValue`, `moveNode`, `deleteNode`.",
    },

    // ================= CREAR RA√çZ (id=1) =================
    { id: "inputConsola", text: "createRoot(10);", type: "write" },
    {
      id: "console",
      type: "element",
      description:
        "üå± Se cre√≥ la ra√≠z con valor **10** e **id=1**. Tambi√©n qued√≥ disponible el objeto **arbolNario**.",
    },
    { id: "inputConsola", type: "enter" },

    // ================= INSERTAR HIJOS (id=2,3,4) =================
    {
      type: "info",
      description:
        "‚ûï **INSERTCHILD(parentId, valor, index?)**: inserta bajo el padre `parentId`. Si omites `index`, agrega al final; con `index` (0-based) fijas posici√≥n.",
    },

    // hijo con valor 35 como √∫ltimo (id=2)
    {
      id: "inputConsola",
      text: "arbolNario.insertChild(1, 35);",
      type: "write",
    },
    {
      id: "console",
      type: "element",
      description:
        "‚ûï Insertamos **35** como hijo de **id=1** (al final). Este nuevo nodo recibe **id=2**.",
    },
    { id: "inputConsola", type: "enter" },

    // hijo con valor 99 en posici√≥n 0 (id=3)
    {
      id: "inputConsola",
      text: "arbolNario.insertChild(1, 99, 0);",
      type: "write",
    },
    {
      id: "console",
      type: "element",
      description:
        "üìç Insertamos **99** en la **posici√≥n 0** entre los hijos de **id=1**. Este nodo recibe **id=3**. El orden de hijos queda: [99(id=3), 35(id=2)].",
    },
    { id: "inputConsola", type: "enter" },

    // hijo con valor 12 bajo id=3 (id=4)
    {
      id: "inputConsola",
      text: "arbolNario.insertChild(3, 12);",
      type: "write",
    },
    {
      id: "console",
      type: "element",
      description:
        "‚ûï Insertamos **12** como hijo de **id=3**. Este nodo recibe **id=4**.",
    },
    { id: "inputConsola", type: "enter" },

    {
      id: "main-canvas",
      type: "element",
      description:
        "üëÄ Deber√≠as ver 10(id=1) con hijos 99(id=3) y 35(id=2); y 12(id=4) colgando de 99(id=3).",
    },

    // ================= UPDATEVALUE =================
    {
      type: "info",
      description:
        "‚úèÔ∏è **UPDATEVALUE(id, nuevoValor)**: actualiza el valor almacenado en el nodo indicado.",
    },
    {
      id: "inputConsola",
      text: "arbolNario.updateValue(2, 33);",
      type: "write",
    },
    {
      id: "console",
      type: "element",
      description: "‚úèÔ∏è Actualizamos el nodo **id=2** de **35 ‚Üí 33**.",
    },
    { id: "inputConsola", type: "enter" },

    // ================= SEARCH =================
    {
      type: "info",
      description:
        "üîé **SEARCH(valor)**: busca por BFS el primer nodo con ese valor y resalta el camino.",
    },
    { id: "inputConsola", text: "arbolNario.search(12);", type: "write" },
    {
      id: "console",
      type: "element",
      description: "üîé Buscamos el valor **12**.",
    },
    { id: "inputConsola", type: "enter" },
    {
      id: "main-canvas",
      type: "element",
      description: "‚úÖ Se resalta el camino hasta **12 (id=4)** si existe.",
    },

    // ================= MOVENODE =================
    {
      type: "info",
      description:
        "üì¶ **MOVENODE(id, newParentId, index?)**: mueve un sub√°rbol a otro padre. `index` fija la posici√≥n entre los hijos del nuevo padre.",
    },
    // mover id=4 (12) a ser hijo de la ra√≠z id=1 en posici√≥n 1
    {
      id: "inputConsola",
      text: "arbolNario.moveNode(4, 1, 1);",
      type: "write",
    },
    {
      id: "console",
      type: "element",
      description:
        "üì¶ Movemos el nodo **id=4** (12) a **padre id=1**, en **posici√≥n 1**.",
    },
    { id: "inputConsola", type: "enter" },
    {
      id: "main-canvas",
      type: "element",
      description:
        "üîÅ Observa que **12(id=4)** ahora cuelga de la ra√≠z, colocado entre sus hijos seg√∫n `index`.",
    },

    // ================= GET TRAVERSALS =================
    {
      type: "info",
      description:
        "üß≠ **GETPREORDER / GETPOSTORDER / GETLEVELORDER**: obt√©n recorridos cl√°sicos del √°rbol.",
    },
    { id: "inputConsola", text: "arbolNario.getPreOrder();", type: "write" },
    {
      id: "console",
      type: "element",
      description: "üß≠ **Preorden**: nodo ‚Üí hijos.",
    },
    { id: "inputConsola", type: "enter" },

    { id: "inputConsola", text: "arbolNario.getPostOrder();", type: "write" },
    {
      id: "console",
      type: "element",
      description: "üîÅ **Postorden**: hijos ‚Üí nodo.",
    },
    { id: "inputConsola", type: "enter" },

    { id: "inputConsola", text: "arbolNario.getLevelOrder();", type: "write" },
    {
      id: "console",
      type: "element",
      description: "üì∂ **Por niveles (BFS)**.",
    },
    { id: "inputConsola", type: "enter" },

    // ================= DELETENODE =================
    {
      type: "info",
      description:
        "üóëÔ∏è **DELETENODE(id)**: elimina un nodo y todo su sub√°rbol. Si eliminas la ra√≠z, el √°rbol queda vac√≠o.",
    },
    // elimina el 99 con su sub√°rbol (si 12 a√∫n estuviera debajo, tambi√©n se ir√≠a)
    { id: "inputConsola", text: "arbolNario.deleteNode(3);", type: "write" },
    {
      id: "console",
      type: "element",
      description:
        "üóëÔ∏è Eliminamos el nodo **id=3** (y su sub√°rbol si lo tuviera).",
    },
    { id: "inputConsola", type: "enter" },

    // ================= CLEAN ‚Üí OBJETO DESAPARECE =================
    { id: "inputConsola", text: "arbolNario.clean();", type: "write" },
    {
      id: "console",
      type: "element",
      description:
        "üßΩ **LIMPIEZA COMPLETA**: el √°rbol queda vac√≠o y **se elimina el objeto arbolNario**.",
    },
    { id: "inputConsola", type: "enter" },

    // ================= REINICIO TRAS CLEAN (sin prefijo) =================
    {
      type: "info",
      description:
        "üîÅ Tras `clean()`, para seguir debes **re-crear** el objeto con **createRoot(valor)** **SIN** prefijo.",
    },
    { id: "inputConsola", text: "createRoot(50);", type: "write" },
    {
      id: "console",
      type: "element",
      description:
        "üå± Nueva ra√≠z **50** creada. Se reinstanci√≥ **arbolNario** con **id=1** nuevamente (contador reiniciado en esta sesi√≥n vac√≠a).",
    },
    { id: "inputConsola", type: "enter" },

    // ================= CIERRE =================
    {
      type: "info",
      description:
        "üéØ Resumen: crea con **createRoot** ‚Üí opera con **arbolNario.*** usando **ids num√©ricos** consecutivos ‚Üí `clean()` borra todo y el objeto ‚Üí vuelve a empezar con `createRoot(valor)`.",
    },
  ];
}
