import { TourStep } from "../typesTour";

/** Tutorial interactivo del √Årbol B+ (orden m = 4, t = 2 en el ejemplo de UI). */
export function getArbolBPTour(): TourStep[] {
  return [
    /* =============== INTRO TE√ìRICA =============== */
    {
      type: "info",
      description:
        "üå≥ Un **√Årbol B+** es un √°rbol *multi-rama* (m-ario) usado en bases de datos y sistemas de archivos. Todas las **claves reales viven en las hojas**; los nodos internos solo **enrutan** con separadores.",
    },
    {
      type: "info",
      description:
        "üß© Propiedades clave: 1) El √°rbol se mantiene **equilibrado** (todas las hojas a la misma altura). 2) Cada nodo (salvo la ra√≠z) respeta m√≠nimos/m√°ximos de claves seg√∫n el **orden m** (fan-out). 3) Las hojas est√°n **encadenadas** con punteros izquierda‚Üîderecha para escaneos r√°pidos.",
    },
    {
      type: "info",
      description:
        "üìê En el panel ver√°s algo como **t = 2 (orden m = 4)**. Intuici√≥n: una hoja admite hasta **m‚àí1** claves (aqu√≠ 3). Si se desborda, **se divide (split)** y se **duplica** el separador hacia el padre. Si el padre tambi√©n se llena, el *split* **cascada** hasta la ra√≠z.",
    },

    /* =============== DEMO A ‚Äî INSERT + SPLIT DE HOJA =============== */
    {
      type: "info",
      description:
        "üß™ Empecemos creando el √°rbol y provocando el **primer split de hoja**. Si el objeto no existe, `insert()` lo crea; luego usaremos `arbolBP.insert()`.",
    },
    { id: "inputConsola", text: "insert(10);", type: "write" },
    { id: "inputConsola", type: "enter" },
    {
      id: "console",
      type: "element",
      description: "‚ûï Se crea la **hoja ra√≠z** con {10}.",
    },

    { id: "inputConsola", text: "arbolBP.insert(20);", type: "write" },
    { id: "inputConsola", type: "enter" },
    {
      id: "console",
      type: "element",
      description: "‚ûï Insertamos **20** en la hoja: {10, 20}.",
    },

    { id: "inputConsola", text: "arbolBP.insert(30);", type: "write" },
    { id: "inputConsola", type: "enter" },
    {
      id: "console",
      type: "element",
      description: "‚ûï Ahora la hoja es {10, 20, 30} (a√∫n en capacidad).",
    },

    { id: "inputConsola", text: "arbolBP.insert(40);", type: "write" },
    { id: "inputConsola", type: "enter" },
    {
      id: "main-canvas",
      type: "element",
      description:
        "üîÄ **Split de hoja**: {10,20} | {30,40}. El separador **30** se **duplica** hacia el padre (nuevo nodo interno si no exist√≠a). Las hojas quedan enlazadas por sus punteros laterales.",
    },

    /* Limpieza visual opcional (no borra el √°rbol; solo explica) */
    {
      type: "info",
      description:
        "üí° Observa el **separador 30** en el nodo interno y los **punteros hoja‚Üîhoja**. Este patr√≥n es la base de B+.",
    },

    /* =============== DEMO B ‚Äî SPLIT EN CASCADA (INTERNOS Y RA√çZ) =============== */
    {
      type: "info",
      description:
        "üöß Ahora forzaremos **m√°s splits** para que el padre se llene y ocurra **cascada** (incluso divisi√≥n de la ra√≠z).",
    },
    { id: "inputConsola", text: "arbolBP.insert(50);", type: "write" },
    { id: "inputConsola", type: "enter" },
    { id: "inputConsola", text: "arbolBP.insert(60);", type: "write" },
    { id: "inputConsola", type: "enter" },
    { id: "inputConsola", text: "arbolBP.insert(70);", type: "write" },
    { id: "inputConsola", type: "enter" },
    { id: "inputConsola", text: "arbolBP.insert(80);", type: "write" },
    { id: "inputConsola", type: "enter" },
    {
      id: "main-canvas",
      type: "element",
      description:
        "üîÅ Al llenarse varias hojas, se crean **nuevos separadores** en el padre. Si el padre supera su capacidad, tambi√©n **se divide**. Si la **ra√≠z** se divide, aparece una **nueva ra√≠z** un nivel arriba.",
    },

    /* =============== DEMO C ‚Äî SEARCH =============== */
    {
      type: "info",
      description:
        "üîé **B√∫squeda**: los internos act√∫an como *routers*. Bajamos por el camino guiado por los separadores hasta la hoja.",
    },
    { id: "inputConsola", text: "arbolBP.search(60);", type: "write" },
    { id: "inputConsola", type: "enter" },
    {
      id: "main-canvas",
      type: "element",
      description:
        "‚úÖ Si **60** existe, se **resalta** en su **hoja**. Recuerda: **todas** las claves reales est√°n en las **hojas**.",
    },
    { id: "inputConsola", text: "arbolBP.search(65);", type: "write" },
    { id: "inputConsola", type: "enter" },
    {
      id: "console",
      type: "element",
      description: "‚ùå Si una clave no est√°, la hoja destino lo confirma.",
    },

    /* =============== DEMO D ‚Äî RANGE [from, to] =============== */
    {
      type: "info",
      description:
        "üìö **Rango inclusivo [from, to]**: localiza la hoja de `from` y recorre **hojas contiguas** por sus punteros `nextLeaf` hasta pasar `to`.",
    },
    { id: "inputConsola", text: "arbolBP.range(25, 65);", type: "write" },
    { id: "inputConsola", type: "enter" },
    {
      id: "console",
      type: "element",
      description:
        "üì§ Se devuelven las claves ordenadas en [25, 65]. Este barrido es eficiente gracias al **encadenamiento de hojas**.",
    },

    /* =============== DEMO E ‚Äî SCANFROM (start, limit) =============== */
    {
      type: "info",
      description:
        "‚û°Ô∏è **ScanFrom(start, limit)**: comienza en `start` (o en la **siguiente clave mayor** si no existe) y recorre `limit` elementos hacia la derecha.",
    },
    { id: "inputConsola", text: "arbolBP.scanFrom(35, 5);", type: "write" },
    { id: "inputConsola", type: "enter" },
    {
      id: "console",
      type: "element",
      description:
        "üìë √ötil para *paginaci√≥n por clave* (por ejemplo, leer 5 registros a partir de ‚âà35).",
    },

    /* =============== DEMO F ‚Äî DELETE (pr√©stamo / fusi√≥n / contracci√≥n de ra√≠z) =============== */
    {
      type: "info",
      description:
        "üßπ **Eliminaci√≥n**: borramos en la **hoja**. Si una hoja queda por debajo del m√≠nimo, primero intenta **pr√©stamo** de un hermano; si no es posible, realiza **fusi√≥n (merge)** y ajusta separadores. La **ra√≠z** puede **contraerse** si se queda con un √∫nico hijo.",
    },
    { id: "inputConsola", text: "arbolBP.delete(30);", type: "write" },
    { id: "inputConsola", type: "enter" },
    {
      id: "main-canvas",
      type: "element",
      description:
        "üîß Si tras borrar **30** hay **underflow** en su hoja, se intentar√° **redistribuir** (pr√©stamo) con un hermano. Observa la actualizaci√≥n de separadores.",
    },
    { id: "inputConsola", text: "arbolBP.delete(25);", type: "write" },
    { id: "inputConsola", type: "enter" },
    {
      id: "main-canvas",
      type: "element",
      description:
        "üß© Si no hay pr√©stamo posible, se **fusiona** la hoja con su hermana; el **separador** correspondiente se **elimina** del padre. Si el padre cae por debajo del m√≠nimo, la correcci√≥n sube como en inserci√≥n pero a la inversa.",
    },
    { id: "inputConsola", text: "arbolBP.delete(20);", type: "write" },
    { id: "inputConsola", type: "enter" },
    {
      id: "main-canvas",
      type: "element",
      description:
        "‚¨áÔ∏è Si la **ra√≠z** termina con un √∫nico hijo, el √°rbol **se contrae** (esa rama pasa a ser la nueva ra√≠z). Altura disminuye en 1.",
    },

    /* =============== DEMO G ‚Äî RECORRIDOS =============== */
    {
      type: "info",
      description:
        "üß≠ **Recorridos**: en B+ el inorden pr√°ctico es ‚Äúhoja por hoja‚Äù siguiendo enlaces laterales; BFS recorre la jerarqu√≠a (internos y hojas).",
    },
    { id: "inputConsola", text: "arbolBP.getInOrder();", type: "write" },
    { id: "inputConsola", type: "enter" },
    {
      id: "console",
      type: "element",
      description:
        "üîÑ Claves en **orden ascendente global** (salen desde las hojas).",
    },

    { id: "inputConsola", text: "arbolBP.getLevelOrder();", type: "write" },
    { id: "inputConsola", type: "enter" },
    {
      id: "main-canvas",
      type: "element",
      description:
        "üì∂ **BFS** por niveles: primero la ra√≠z (interno), luego sus hijos, etc. √ötil para entender **separadores** y **fan-out**.",
    },

    /* =============== CLEAN FINAL =============== */
    { id: "inputConsola", text: "arbolBP.clean();", type: "write" },
    { id: "inputConsola", type: "enter" },
    {
      id: "console",
      type: "element",
      description: "ü´ô √Årbol B+ **vac√≠o**. Listo para nuevos experimentos.",
    },

    /* =============== NOTAS FINALES (INFO) =============== */
    {
      type: "info",
      description:
        "‚öôÔ∏è Rendimiento: b√∫squedas/insert/eliminan toman **O(log‚Çò n)** por la gran **ramificaci√≥n (m)**. Las operaciones por rango son **muy eficientes** gracias a los **punteros de hojas**.",
    },
    {
      type: "info",
      description:
        "üìé Recordatorio de comandos: `arbolBP.insert(x)`, `arbolBP.delete(x)`, `arbolBP.search(x)`, `arbolBP.range(a,b)`, `arbolBP.scanFrom(start,limit)`, `arbolBP.getInOrder()`, `arbolBP.getLevelOrder()`, `arbolBP.clean()`.",
    },
  ];
}
