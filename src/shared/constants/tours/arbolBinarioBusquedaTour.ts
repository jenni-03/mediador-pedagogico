import { TourStep } from "../typesTour";

export function getArbolBinarioBusquedaTour(): TourStep[] {
    return [
        // INTRODUCCI√ìN
        {
            type: "info",
            description: `üå≥ El **√°rbol binario de b√∫squeda** es una estructura jer√°rquica donde cada nodo puede tener como m√°ximo **dos hijos**: uno izquierdo y uno derecho.\n\n La caracter√≠stica principal de un ABB es que para cada nodo, todos los valores en su sub√°rbol izquierdo son menores que el valor del nodo, y todos los valores en su sub√°rbol derecho son mayores.`,
        },
        {
            type: "info",
            description: `üß© En este simulador, puedes insertar nodos, eliminarlos, buscar valores, y visualizar distintos recorridos: preorden, inorden, postorden y por niveles.`,
        },

        // CREAR RA√çZ
        {
            id: "inputConsola",
            text: "insert(40);",
            type: "write",
        },
        {
            id: "console",
            description: `üå± \`insert(40)\` crea el primer nodo del √°rbol con valor **40** como ra√≠z.`,
            type: "element",
        },
        {
            id: "inputConsola",
            type: "enter",
        },

        // INSERTAR HIJOS DE 40
        {
            id: "inputConsola",
            text: "insert(20);",
            type: "write",
        },
        {
            id: "console",
            description: `üåø \`insert(20)\` agrega un nodo con valor **20** como hijo izquierdo de **40** (puesto que el valor es menor a la ra√≠z).`,
            type: "element",
        },
        {
            id: "inputConsola",
            type: "enter",
        },

        {
            id: "inputConsola",
            text: "insert(60);",
            type: "write",
        },
        {
            id: "console",
            description: `üåø \`insert(60)\` agrega un nodo con valor **60** como hijo derecho de **40** (puesto que el valor es mayor a la ra√≠z).`,
            type: "element",
        },
        {
            id: "inputConsola",
            type: "enter",
        },

        // INSERTAR HIJOS DE 60
        {
            id: "inputConsola",
            text: "insert(50);",
            type: "write",
        },
        {
            id: "console",
            description: `üåø \`insert(50)\` inserta un nodo **50** como hijo izquierdo de **60** (puesto que el valor es menor a la ra√≠z del sub√°rbol).`,
            type: "element",
        },
        {
            id: "inputConsola",
            type: "enter",
        },

        {
            id: "inputConsola",
            text: "insert(80);",
            type: "write",
        },
        {
            id: "console",
            description: `üåø \`insert(80)\` inserta un nodo **80** como hijo derecho de **60** (puesto que el valor es mayor a la ra√≠z del sub√°rbol).`,
            type: "element",
        },
        {
            id: "inputConsola",
            type: "enter",
        },

        // INSERTAR HIJO DE 20
        {
            id: "inputConsola",
            text: "insert(10);",
            type: "write",
        },
        {
            id: "console",
            description: `üåø \`insertLeft(10)\` inserta un nodo **10** como hijo izquierdo de **20** (puesto que el valor es menor a la ra√≠z del sub√°rbol).`,
            type: "element",
        },
        {
            id: "inputConsola",
            type: "enter",
        },

        {
            id: "main-canvas",
            description: `üå≥ ¬°Perfecto! Ya tienes un √°rbol con m√∫ltiples niveles. Observa la estructura formada.`,
            type: "element",
        },

        // SEARCH
        {
            id: "inputConsola",
            text: "search(80);",
            type: "write",
        },
        {
            id: "console",
            description: `üîç \`search(80)\` busca si el nodo con valor 80 existe en el √°rbol.`,
            type: "element",
        },
        {
            id: "inputConsola",
            type: "enter",
        },
        {
            id: "main-canvas",
            description: `üîé El nodo 80 fue encontrado en el recorrido.`,
            type: "element",
        },

        // DELETE
        {
            id: "inputConsola",
            text: "delete(20);",
            type: "write",
        },
        {
            id: "console",
            description: `üóëÔ∏è \`delete(20)\` elimina el nodo con valor 20 si existe.`,
            type: "element",
        },
        {
            id: "inputConsola",
            type: "enter",
        },
        {
            id: "main-canvas",
            description: `üßπ El nodo 20 fue eliminado correctamente.`,
            type: "element",
        },

        // RECORRIDOS
        {
            id: "inputConsola",
            text: "getPreOrder();",
            type: "write",
        },
        {
            id: "console",
            description: `üß≠ \`getPreOrder()\`: nodo ‚Üí izquierda ‚Üí derecha.`,
            type: "element",
        },
        {
            id: "inputConsola",
            type: "enter",
        },

        {
            id: "inputConsola",
            text: "getInOrder();",
            type: "write",
        },
        {
            id: "console",
            description: `üîÑ \`getInOrder()\`: izquierda ‚Üí nodo ‚Üí derecha.`,
            type: "element",
        },
        {
            id: "inputConsola",
            type: "enter",
        },

        {
            id: "inputConsola",
            text: "getPostOrder();",
            type: "write",
        },
        {
            id: "console",
            description: `üîÅ \`getPostOrder()\`: izquierda ‚Üí derecha ‚Üí nodo.`,
            type: "element",
        },
        {
            id: "inputConsola",
            type: "enter",
        },

        {
            id: "inputConsola",
            text: "getLevelOrder();",
            type: "write",
        },
        {
            id: "console",
            description: `üì∂ \`getLevelOrder()\`: recorre por niveles, de izquierda a derecha.`,
            type: "element",
        },
        {
            id: "inputConsola",
            type: "enter",
        },

        // CLEAN
        {
            id: "inputConsola",
            text: "clean();",
            type: "write",
        },
        {
            id: "console",
            description: `üßº \`clean()\` borra por completo el √°rbol binario de b√∫squeda.`,
            type: "element",
        },
        {
            id: "inputConsola",
            type: "enter",
        },
        {
            id: "main-canvas",
            description: `ü´ô El √°rbol fue eliminado. Puedes comenzar de nuevo.`,
            type: "element",
        },
    ];
}