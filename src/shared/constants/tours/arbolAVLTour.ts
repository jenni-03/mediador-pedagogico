import { TourStep } from "../typesTour";

export function getArbolAVLTour(): TourStep[] {
  return [
    // Introducci√≥n + flujo correcto
    {
      type: "info",
      description:
        "üå≤ Un **√Årbol AVL** es un ABB **auto-balanceado**: tras cada operaci√≥n mantiene el **factor de balance (bf)** en {‚àí1, 0, 1}. Si se desbalancea, aplica rotaciones **LL**, **RR**, **LR** o **RL** autom√°ticamente.",
    },
    {
      type: "info",
      description:
        "üß≠ Flujo de uso: el **primer** `insert(valor)` **crea el objeto `arbolA`**. Desde entonces **todo** debe ir con el prefijo **`arbolA.`**. Tras `arbolA.clean()`, vuelve a ejecutar `insert(...)` (sin prefijo) para **recrear `arbolA`** y contin√∫a con `arbolA.`",
    },
    {
      type: "info",
      description:
        "üß† En el canvas ver√°s **bf** (balance factor) y **h** (altura). Cuando bf sale del rango, el AVL se reequilibra con la rotaci√≥n correspondiente.",
    },

    // =============== DEMO ROTACIONES ===============

    // --- LL (rotaci√≥n simple a la derecha) ---
    {
      type: "info",
      description:
        "üß™ **Caso LL** (sub√°rbol izquierdo pesado) ‚Üí rotaci√≥n **a la derecha**.",
    },
    { id: "inputConsola", text: "insert(30);", type: "write" },
    {
      id: "console",
      type: "element",
      description:
        "‚ûï Este primer `insert(30)` **crea** el AVL y su referencia queda en **`arbolA`**.",
    },
    { id: "inputConsola", type: "enter" },

    { id: "inputConsola", text: "arbolA.insert(20);", type: "write" },
    {
      id: "console",
      type: "element",
      description: "‚ûï Insertamos **20** (izquierda de 30).",
    },
    { id: "inputConsola", type: "enter" },

    { id: "inputConsola", text: "arbolA.insert(10);", type: "write" },
    {
      id: "console",
      type: "element",
      description:
        "‚ûï Insertamos **10** (izquierda de 20). **30** queda desbalanceado (LL).",
    },
    { id: "inputConsola", type: "enter" },
    {
      id: "main-canvas",
      type: "element",
      description:
        "üîÅ Rotaci√≥n **a la derecha** sobre 30. Nueva ra√≠z **20** (10 como izq., 30 como der.).",
    },

    // Limpieza
    { id: "inputConsola", text: "arbolA.clean();", type: "write" },
    {
      id: "console",
      type: "element",
      description:
        "üßº AVL limpio. Para continuar, **recrea `arbolA`** con un nuevo `insert(...)` sin prefijo.",
    },
    { id: "inputConsola", type: "enter" },

    // --- RR (rotaci√≥n simple a la izquierda) ---
    {
      type: "info",
      description:
        "üß™ **Caso RR** (sub√°rbol derecho pesado) ‚Üí rotaci√≥n **a la izquierda**.",
    },
    { id: "inputConsola", text: "insert(30);", type: "write" },
    {
      id: "console",
      type: "element",
      description: "‚ûï `insert(30)` **recrea `arbolA`** con 30 como ra√≠z.",
    },
    { id: "inputConsola", type: "enter" },

    { id: "inputConsola", text: "arbolA.insert(40);", type: "write" },
    {
      id: "console",
      type: "element",
      description: "‚ûï Insertamos **40** (derecha de 30).",
    },
    { id: "inputConsola", type: "enter" },

    { id: "inputConsola", text: "arbolA.insert(50);", type: "write" },
    {
      id: "console",
      type: "element",
      description:
        "‚ûï Insertamos **50** (derecha de 40). **30** se desbalancea (RR).",
    },
    { id: "inputConsola", type: "enter" },
    {
      id: "main-canvas",
      type: "element",
      description:
        "üîÅ Rotaci√≥n **a la izquierda** sobre 30. Nueva ra√≠z **40** (30 a la izq., 50 a la der.).",
    },

    // Limpieza
    { id: "inputConsola", text: "arbolA.clean();", type: "write" },
    {
      id: "console",
      type: "element",
      description:
        "üßº Limpiamos para el siguiente caso. Recuerda recrear con `insert(...)` sin prefijo.",
    },
    { id: "inputConsola", type: "enter" },

    // --- LR (rotaci√≥n doble izquierda-derecha) ---
    {
      type: "info",
      description:
        "üß™ **Caso LR** (hijo izquierdo derecho-pesado) ‚Üí rotaci√≥n **izquierda en el hijo** y luego **derecha en el padre**.",
    },
    { id: "inputConsola", text: "insert(30);", type: "write" },
    { id: "console", type: "element", description: "‚ûï Ra√≠z **30**." },
    { id: "inputConsola", type: "enter" },

    { id: "inputConsola", text: "arbolA.insert(10);", type: "write" },
    {
      id: "console",
      type: "element",
      description: "‚ûï Insertamos **10** (izquierda de 30).",
    },
    { id: "inputConsola", type: "enter" },

    { id: "inputConsola", text: "arbolA.insert(20);", type: "write" },
    {
      id: "console",
      type: "element",
      description:
        "‚ûï Insertamos **20** (derecha de 10). Se produce **LR** en 30.",
    },
    { id: "inputConsola", type: "enter" },
    {
      id: "main-canvas",
      type: "element",
      description:
        "üîÅ Rotaci√≥n doble **LR**: primero **izquierda en 10**, luego **derecha en 30**. Ra√≠z final **20**.",
    },

    // Limpieza
    { id: "inputConsola", text: "arbolA.clean();", type: "write" },
    {
      id: "console",
      type: "element",
      description:
        "üßº Limpiamos para el √∫ltimo caso. Recrea con `insert(...)` sin prefijo.",
    },
    { id: "inputConsola", type: "enter" },

    // --- RL (rotaci√≥n doble derecha-izquierda) ---
    {
      type: "info",
      description:
        "üß™ **Caso RL** (hijo derecho izquierdo-pesado) ‚Üí rotaci√≥n **derecha en el hijo** y luego **izquierda en el padre**.",
    },
    { id: "inputConsola", text: "insert(30);", type: "write" },
    { id: "console", type: "element", description: "‚ûï Ra√≠z **30**." },
    { id: "inputConsola", type: "enter" },

    { id: "inputConsola", text: "arbolA.insert(50);", type: "write" },
    {
      id: "console",
      type: "element",
      description: "‚ûï Insertamos **50** (derecha de 30).",
    },
    { id: "inputConsola", type: "enter" },

    { id: "inputConsola", text: "arbolA.insert(40);", type: "write" },
    {
      id: "console",
      type: "element",
      description:
        "‚ûï Insertamos **40** (izquierda de 50). Se produce **RL** en 30.",
    },
    { id: "inputConsola", type: "enter" },
    {
      id: "main-canvas",
      type: "element",
      description:
        "üîÅ Rotaci√≥n doble **RL**: primero **derecha en 50**, luego **izquierda en 30**. Ra√≠z final **40**.",
    },

    // Limpieza para construir √°rbol final
    { id: "inputConsola", text: "arbolA.clean();", type: "write" },
    {
      id: "console",
      type: "element",
      description:
        "üßº Limpiamos para construir un AVL m√°s completo. Recrea con `insert(...)` sin prefijo.",
    },
    { id: "inputConsola", type: "enter" },

    // =============== CONSTRUIR AVL COMPLETO ===============
    {
      type: "info",
      description:
        "üèóÔ∏è Construyamos un AVL equilibrado con varias inserciones (el AVL se reequilibra autom√°ticamente cuando haga falta).",
    },
    { id: "inputConsola", text: "insert(31);", type: "write" },
    {
      id: "console",
      type: "element",
      description: "‚ûï `insert(31)` **recrea `arbolA`** (ra√≠z).",
    },
    { id: "inputConsola", type: "enter" },

    { id: "inputConsola", text: "arbolA.insert(20);", type: "write" },
    {
      id: "console",
      type: "element",
      description: "‚ûï Insertamos **20** (sub√°rbol izquierdo).",
    },
    { id: "inputConsola", type: "enter" },

    { id: "inputConsola", text: "arbolA.insert(40);", type: "write" },
    {
      id: "console",
      type: "element",
      description: "‚ûï Insertamos **40** (sub√°rbol derecho).",
    },
    { id: "inputConsola", type: "enter" },

    { id: "inputConsola", text: "arbolA.insert(10);", type: "write" },
    {
      id: "console",
      type: "element",
      description: "‚ûï Insertamos **10** (sub√°rbol de 20).",
    },
    { id: "inputConsola", type: "enter" },

    { id: "inputConsola", text: "arbolA.insert(30);", type: "write" },
    {
      id: "console",
      type: "element",
      description:
        "‚ûï Insertamos **30** (sub√°rbol de 20). Si se desbalancea, el AVL lo corrige.",
    },
    { id: "inputConsola", type: "enter" },

    { id: "inputConsola", text: "arbolA.insert(41);", type: "write" },
    {
      id: "console",
      type: "element",
      description: "‚ûï Insertamos **41** (derecha de 40). √Årbol equilibrado.",
    },
    { id: "inputConsola", type: "enter" },
    {
      id: "main-canvas",
      type: "element",
      description:
        "üå≥ Deber√≠as ver un AVL balanceado (altura m√≠nima posible). Revisa **bf** y **h** en los nodos.",
    },

    // =============== SEARCH + DELETE (con rebalanceo) ===============
    { id: "inputConsola", text: "arbolA.search(30);", type: "write" },
    {
      id: "console",
      type: "element",
      description: "üîé Buscamos el valor **30** en el √°rbol.",
    },
    { id: "inputConsola", type: "enter" },
    {
      id: "main-canvas",
      type: "element",
      description: "‚úÖ El nodo **30** se resalta si existe.",
    },

    { id: "inputConsola", text: "arbolA.delete(20);", type: "write" },
    {
      id: "console",
      type: "element",
      description:
        "üóëÔ∏è Eliminamos **20**. El AVL reorganiza enlaces y **rebalancea** si es necesario.",
    },
    { id: "inputConsola", type: "enter" },
    {
      id: "main-canvas",
      type: "element",
      description:
        "üîÅ Tras la eliminaci√≥n, observa c√≥mo **bf** vuelve al rango {‚àí1, 0, 1}.",
    },

    // =============== RECORRIDOS ===============
    { id: "inputConsola", text: "arbolA.getPreOrder();", type: "write" },
    {
      id: "console",
      type: "element",
      description: "üß≠ **Preorden**: nodo ‚Üí izquierda ‚Üí derecha.",
    },
    { id: "inputConsola", type: "enter" },

    { id: "inputConsola", text: "arbolA.getInOrder();", type: "write" },
    {
      id: "console",
      type: "element",
      description:
        "üîÑ **Inorden**: izquierda ‚Üí nodo ‚Üí derecha (devuelve los valores **ordenados**).",
    },
    { id: "inputConsola", type: "enter" },

    { id: "inputConsola", text: "arbolA.getPostOrder();", type: "write" },
    {
      id: "console",
      type: "element",
      description: "üîÅ **Postorden**: izquierda ‚Üí derecha ‚Üí nodo.",
    },
    { id: "inputConsola", type: "enter" },

    { id: "inputConsola", text: "arbolA.getLevelOrder();", type: "write" },
    {
      id: "console",
      type: "element",
      description:
        "üì∂ **Por niveles (BFS)**: de arriba hacia abajo, izquierda a derecha.",
    },
    { id: "inputConsola", type: "enter" },

    // =============== CLEAN ===============
    { id: "inputConsola", text: "arbolA.clean();", type: "write" },
    {
      id: "console",
      type: "element",
      description:
        "üßΩ Limpiamos el √°rbol AVL por completo. Para recrearlo, ejecuta **`insert(valor)`** (sin prefijo) y contin√∫a con **`arbolA.`**",
    },
    { id: "inputConsola", type: "enter" },
    {
      id: "main-canvas",
      type: "element",
      description: "ü´ô El √°rbol qued√≥ vac√≠o. ¬°Listo para nuevos experimentos!",
    },
  ];
}
